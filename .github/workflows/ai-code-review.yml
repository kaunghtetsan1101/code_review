name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code_review:
    name: AI-Powered Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PR Info
        id: pr-info
        run: |
          echo "pr_title=${{ github.event.pull_request.title || 'Manual Test Run' }}" >> $GITHUB_OUTPUT
          echo "pr_author=${{ github.event.pull_request.user.login || 'manual' }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ github.event.pull_request.html_url || github.server_url }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.number || 'TEST' }}" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ','
          files: |
            **.kt
            **.java
            **.xml
            **.gradle
            **.kts
            **.pro

      - name: Check if should run
        id: should-run
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "files=TestFile.kt" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
            echo "files=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
            echo "files=" >> $GITHUB_OUTPUT
          fi

      - name: Create diff content
        id: diff
        if: steps.should-run.outputs.run == 'true'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Simple test diff for manual runs
            DIFF_TEXT="Test Android code with issues: static Activity reference (memory leak), force unwrap (!!), hardcoded strings"
          else
            # Get real PR diff
            DIFF_TEXT=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | head -c 3000)
          fi
          
          # Escape for JSON
          ESCAPED_DIFF=$(echo "$DIFF_TEXT" | jq -Rs .)
          echo "content=$ESCAPED_DIFF" >> $GITHUB_OUTPUT

      - name: Call AI Review API
        id: ai-review
        if: steps.should-run.outputs.run == 'true'
        env:
          CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
          CODE_REVIEW_WORKER_URL: ${{ secrets.CODE_REVIEW_WORKER_URL }}
        run: |
          if [ -z "$CODE_REVIEW_API_KEY" ]; then
            echo "status=error" >> $GITHUB_OUTPUT
            echo "message=CODE_REVIEW_API_KEY not configured in secrets" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Default to DeepSeek if no worker URL
          WORKER_URL="${CODE_REVIEW_WORKER_URL:-https://api.deepseek.com/v1/chat/completions}"
          
          # Prepare request
          if [[ "$WORKER_URL" == *"deepseek"* ]]; then
            # DeepSeek format
            REQUEST_JSON=$(jq -n \
              --argjson diff "${{ steps.diff.outputs.content }}" \
              --arg files "${{ steps.should-run.outputs.files }}" \
              '{
                model: "deepseek-coder",
                messages: [
                  {
                    role: "system",
                    content: "You are an Android code reviewer. Be concise and specific."
                  },
                  {
                    role: "user",
                    content: ("Review this Android code. Files: " + $files + "\n\nChanges:\n" + $diff)
                  }
                ],
                temperature: 0.3,
                max_tokens: 800
              }')
          else
            # Custom worker format
            REQUEST_JSON=$(jq -n \
              --arg repo "${{ github.repository }}" \
              --arg pr_number "${{ steps.pr-info.outputs.pr_number }}" \
              --arg files "${{ steps.should-run.outputs.files }}" \
              --argjson diff "${{ steps.diff.outputs.content }}" \
              '{
                repository: $repo,
                pr_number: $pr_number,
                changed_files: $files,
                diff_content: $diff,
                options: {
                  focus_areas: ["security", "performance", "best_practices"],
                  max_suggestions: 10
                }
              }')
          fi
          
          # Call API
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CODE_REVIEW_API_KEY" \
            -d "$REQUEST_JSON" \
            "$WORKER_URL")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" = "200" ]; then
            if [[ "$WORKER_URL" == *"deepseek"* ]]; then
              # Extract DeepSeek response
              REVIEW=$(echo "$BODY" | jq -r '.choices[0].message.content // "No review"')
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message<<REVIEWEND" >> $GITHUB_OUTPUT
              echo "$REVIEW" >> $GITHUB_OUTPUT
              echo "REVIEWEND" >> $GITHUB_OUTPUT
            else
              # Custom worker response
              echo "status=$(echo "$BODY" | jq -r '.status // "error"')" >> $GITHUB_OUTPUT
              echo "message<<REVIEWEND" >> $GITHUB_OUTPUT
              echo "$(echo "$BODY" | jq -r '.message // "No message"')" >> $GITHUB_OUTPUT
              echo "REVIEWEND" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=error" >> $GITHUB_OUTPUT
            echo "message=API call failed with code $HTTP_CODE" >> $GITHUB_OUTPUT
          fi

      - name: Show Results
        if: always()
        run: |
          echo "## AI Code Review" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.ai-review.outputs.status || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Files:** ${{ steps.should-run.outputs.files || 'none' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Review:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.ai-review.outputs.message || 'No review performed' }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.ai-review.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `${{ steps.ai-review.outputs.message }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## ðŸ¤– AI Code Review\n\n${message}\n\n---\n*AI-generated review. Please verify before implementing.*`
            });

      - name: Send Slack Notification
        if: steps.should-run.outputs.run == 'true'
        continue-on-error: true
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -z "$SLACK_WEBHOOK" ]; then
            exit 0
          fi
          
          STATUS="${{ steps.ai-review.outputs.status }}"
          COLOR=$([ "$STATUS" = "success" ] && echo "good" || echo "danger")
          
          curl -X POST "$SLACK_WEBHOOK" \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "AI Code Review completed",
              "attachments": [{
                "color": "'"$COLOR"'",
                "title": "PR: '"${{ steps.pr-info.outputs.pr_title }}"'",
                "fields": [
                  {"title": "Status", "value": "'"$STATUS"'", "short": true},
                  {"title": "Files", "value": "'"${{ steps.should-run.outputs.files }}"'", "short": true}
                ]
              }]
            }'

      - name: Set PR Status Check
        if: github.event_name == 'pull_request' && steps.ai-review.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'AI Review completed',
              context: 'ai-code-review'
            });