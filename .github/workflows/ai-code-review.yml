name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    name: AI-Powered Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Test Mode
        id: setup
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "is_test=true" >> $GITHUB_OUTPUT
            echo "files=MainActivity.kt" >> $GITHUB_OUTPUT
          else
            echo "is_test=false" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files
        id: changed-files
        if: steps.setup.outputs.is_test == 'false'
        uses: tj-actions/changed-files@v44
        with:
          separator: ','
          files: |
            **.kt
            **.java
            **.xml
            **.gradle

      - name: Prepare diff content
        id: diff
        run: |
          if [[ "${{ steps.setup.outputs.is_test }}" == "true" ]]; then
            echo "Creating test diff..."
            DIFF_CONTENT="Test diff: Memory leak in MainActivity.kt - static Activity reference"
          else
            if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
              echo "Getting real diff..."
              DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | head -c 3000)
            else
              echo "No files changed"
              DIFF_CONTENT="No relevant files changed"
            fi
          fi
          echo "diff_content<<ENDOFDIFF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "ENDOFDIFF" >> $GITHUB_OUTPUT

      - name: Call DeepSeek AI
        id: ai-review
        if: steps.setup.outputs.is_test == 'true' || steps.changed-files.outputs.any_changed == 'true'
        env:
          CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
        run: |
          echo "🤖 Starting AI Review..."
          
          if [ -z "$CODE_REVIEW_API_KEY" ]; then
            echo "❌ CODE_REVIEW_API_KEY not set"
            echo "review=ERROR: Please add CODE_REVIEW_API_KEY to repository secrets" >> $GITHUB_OUTPUT
            echo "status=error" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Prepare simple prompt
          PROMPT="Review this Android code for issues: ${{ steps.diff.outputs.diff_content }}"
          
          # Call DeepSeek API
          echo "Calling API..."
          RESPONSE=$(curl -s -X POST https://api.deepseek.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CODE_REVIEW_API_KEY" \
            -d "{
              \"model\": \"deepseek-coder\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"You are an Android code reviewer. Be concise.\"},
                {\"role\": \"user\", \"content\": \"$PROMPT\"}
              ],
              \"temperature\": 0.3,
              \"max_tokens\": 500
            }")
          
          # Extract review
          if echo "$RESPONSE" | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
            REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
            echo "✅ Got AI review"
            echo "review<<ENDREVIEW" >> $GITHUB_OUTPUT
            echo "$REVIEW" >> $GITHUB_OUTPUT
            echo "ENDREVIEW" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          else
            ERROR=$(echo "$RESPONSE" | jq -r '.error.message // "Unknown error"' 2>/dev/null || echo "Failed to parse response")
            echo "❌ API Error: $ERROR"
            echo "review=API Error: $ERROR" >> $GITHUB_OUTPUT
            echo "status=error" >> $GITHUB_OUTPUT
          fi

      - name: Display Results
        if: always()
        run: |
          echo "## 🤖 AI Code Review" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.ai-review.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Review:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.ai-review.outputs.review }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.ai-review.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const review = `${{ steps.ai-review.outputs.review }}`;
            const comment = `## 🤖 AI Code Review\n\n${review}\n\n---\n*AI-generated review. Please verify before implementing.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });