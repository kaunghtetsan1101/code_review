name: Simple Code Review

on:
  push:
    branches: ['**']
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ','

      - name: Call DeepSeek AI Worker
        id: call-deepseek
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
          CODE_REVIEW_WORKER_URL: ${{ secrets.CODE_REVIEW_WORKER_URL }}
        run: |
          echo "🤖 Requesting code review..."
          
          if [ -z "$CODE_REVIEW_API_KEY" ] || [ -z "$CODE_REVIEW_WORKER_URL" ]; then
            echo "::warning::API credentials not configured"
            exit 0
          fi
          
          files_json="[]"
          IFS=',' read -ra changed <<< "${{ steps.changed-files.outputs.all_changed_files }}"
          for file in "${changed[@]}"; do
            # Skip deleted or binary files
            if [ ! -f "$file" ]; then
              echo "⚠️ Skipping missing file: $file"
              continue
            fi
          
            code=$(jq -Rs . < "$file")
            file_json="{\"filename\":\"$file\",\"code\":$code}"
            files_json=$(echo "$files_json" | jq ". + [$file_json]")
          done
          
          json_payload=$(jq -n --argjson files "$files_json" '{ files: $files }')
          
          echo "payload=$json_payload"
          
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CODE_REVIEW_API_KEY" \
            -d "$json_payload" \
            "$CODE_REVIEW_WORKER_URL" || echo '{"status":"error","message":"API call failed"}')
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$response" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          RESPONSE_JSON: ${{ steps.call-deepseek.outputs.response }}
        continue-on-error: true
        run: |
          if [ -z "$SLACK_WEBHOOK" ]; then
            echo "⚠️ SLACK_WEBHOOK not configured - skipping notification"
            exit 0
          fi

          echo "$RESPONSE_JSON" > /tmp/response.json

          # Extract review or fallback
          review=$(jq -r '.review // "⚠️ No review returned."' /tmp/response.json)

          # Truncate for Slack (optional but safe)
          echo "$review" | head -c 3900 > /tmp/review-short.txt

          # Wrap in code block formatting and safely encode to JSON using jq
          printf "🤖 *AI Code Review Result:*\n\`\`\`\n" > /tmp/slack-body.txt
          cat /tmp/review-short.txt >> /tmp/slack-body.txt
          printf "\n\`\`\`\n" >> /tmp/slack-body.txt

          jq -Rs '{ text: . }' < /tmp/slack-body.txt > /tmp/payload.json

          echo "✅ Sending payload to Slack..."
          cat /tmp/payload.json

          curl -X POST -H 'Content-type: application/json' --data @/tmp/payload.json "$SLACK_WEBHOOK"
      
      
      
      
      
      
      
      
      



