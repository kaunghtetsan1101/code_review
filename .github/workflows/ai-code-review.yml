name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        default: 'true'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code_review:
    name: AI-Powered Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PR Info
        id: pr-info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "pr_title=Manual Test Run" >> $GITHUB_OUTPUT
            echo "pr_author=manual" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
            echo "base_branch=main" >> $GITHUB_OUTPUT
            echo "head_branch=test" >> $GITHUB_OUTPUT
          else
            echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            echo "pr_author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
            echo "base_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
            echo "head_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ','
          files: |
            **.kt
            **.java
            **.xml
            **.gradle
            **.kts
            **.pro

      - name: Override for test mode
        id: test-override
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "üß™ Test mode: Creating sample files"
          echo "all_changed_files=MainActivity.kt,activity_main.xml" >> $GITHUB_OUTPUT
          echo "any_changed=true" >> $GITHUB_OUTPUT

      - name: Get PR diff
        id: pr-diff
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Create test diff - Using EOFDIFF to avoid conflicts
            cat > test_diff.txt << 'EOFDIFF'
  diff --git a/app/src/main/java/com/example/MainActivity.kt b/app/src/main/java/com/example/MainActivity.kt
  index 0000000..1111111 100644
--- a/app/src/main/java/com/example/MainActivity.kt
  +++ b/app/src/main/java/com/example/MainActivity.kt
  @@ -10,6 +10,18 @@ class MainActivity : AppCompatActivity() {
       override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
  +
     +        // Potential issues:
  +        companion object {
     +            var instance: Activity? = null  // Memory leak!
  +        }
  +
  +        val data = intent.getStringExtra("key")!!  // Force unwrap - crash risk
  +        textView.text = "Hardcoded string"  // Should use resources
  +
  +        Thread.sleep(2000)  // ANR risk - blocking main thread
  +
  +        startActivity(Intent(this, NextActivity::class.java))
  +        finish()  // No transition animation
  }
}
  EOFDIFF
  DIFF_CONTENT=$(cat test_diff.txt)
  else
  # Get actual diff content
  git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > pr_diff.txt
  
  # Limit diff size
  if [ $(stat -c%s pr_diff.txt 2>/dev/null || stat -s pr_diff.txt | cut -d' ' -f8) -gt 512000 ]; then
  echo "Diff too large, truncating..."
  head -c 512000 pr_diff.txt > pr_diff_truncated.txt
  mv pr_diff_truncated.txt pr_diff.txt
  fi
  
  DIFF_CONTENT=$(cat pr_diff.txt | jq -Rs .)
  fi
  
  # Save diff for next step
  echo "diff_content<<EOF" >> $GITHUB_OUTPUT
  echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
  echo "EOF" >> $GITHUB_OUTPUT

     - name: Analyze Android-specific patterns
       id: android-analysis
       if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
       run: |
         issues=""
         FILES="${{ steps.test-override.outputs.all_changed_files || steps.changed-files.outputs.all_changed_files }}"
         
         # For test mode, simulate some issues
         if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
           issues="WARNING: Force unwrap (!!) found in: MainActivity.kt\n"
           issues="${issues}WARNING: Hardcoded strings found in: MainActivity.kt\n"
         else
           # Check for real issues in changed files
           if echo "$FILES" | grep -q "\.xml"; then
             for file in $(echo "$FILES" | tr ',' ' '); do
               if [[ -f "$file" ]] && grep -q 'android:text="[^@]' "$file" 2>/dev/null; then
                 issues="${issues}WARNING: Hardcoded strings found in: $file\n"
               fi
             done
           fi
         
           if echo "$FILES" | grep -q "\.kt"; then
             for file in $(echo "$FILES" | tr ',' ' '); do
               if [[ -f "$file" ]] && grep -q '!!' "$file" 2>/dev/null; then
                 issues="${issues}WARNING: Force unwrap (!!) found in: $file\n"
               fi
             done
           fi
         fi
         
         echo "android_issues<<EOF" >> $GITHUB_OUTPUT
         echo -e "$issues" >> $GITHUB_OUTPUT
         echo "EOF" >> $GITHUB_OUTPUT

     - name: Call AI Code Review API
       id: ai-review
       if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
       env:
         CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
         CODE_REVIEW_WORKER_URL: ${{ secrets.CODE_REVIEW_WORKER_URL }}
       run: |
         echo "ü§ñ Starting AI Code Review..."
         
         # Check if API key exists
         if [ -z "$CODE_REVIEW_API_KEY" ]; then
           echo "‚ùå CODE_REVIEW_API_KEY not found in secrets!"
           echo "Please add it in Settings ‚Üí Secrets ‚Üí Actions"
           echo "response<<EOF" >> $GITHUB_OUTPUT
           echo '{"status": "error", "message": "CODE_REVIEW_API_KEY not configured"}' >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 0
         fi
         
         # Use DeepSeek API directly if no worker URL specified
         if [ -z "$CODE_REVIEW_WORKER_URL" ]; then
           CODE_REVIEW_WORKER_URL="https://api.deepseek.com/v1/chat/completions"
           echo "Using default DeepSeek API endpoint"
         fi
         
         echo "‚úÖ API Key found"
         echo "üìç Worker URL: $CODE_REVIEW_WORKER_URL"
         
         # Prepare request based on endpoint type
         if [[ "$CODE_REVIEW_WORKER_URL" == *"deepseek.com"* ]]; then
           # DeepSeek API format
           DIFF_PREVIEW=$(echo "${{ steps.pr-diff.outputs.diff_content }}" | jq -r . | head -c 3000)
           REQUEST_BODY=$(jq -n \
             --arg diff "$DIFF_PREVIEW" \
             --arg files "${{ steps.test-override.outputs.all_changed_files || steps.changed-files.outputs.all_changed_files }}" \
             --arg issues "${{ steps.android-analysis.outputs.android_issues }}" \
             '{
               model: "deepseek-coder",
               messages: [
                 {
                   role: "system",
                   content: "You are an expert Android code reviewer. Analyze the code and provide specific, actionable feedback."
                 },
                 {
                   role: "user",
                   content: "Review this Android code:\n\nFiles: \($files)\n\nKnown issues:\n\($issues)\n\nCode diff:\n\($diff)\n\nProvide 3-5 specific points about security, performance, memory leaks, and best practices."
                 }
               ],
               temperature: 0.3,
               max_tokens: 800
             }')
         else
           # Custom worker format (original)
           REQUEST_BODY=$(jq -n \
             --arg repo "${{ github.repository }}" \
             --arg pr_number "${{ github.event.number || 'TEST' }}" \
             --arg pr_title "${{ steps.pr-info.outputs.pr_title }}" \
             --arg pr_author "${{ steps.pr-info.outputs.pr_author }}" \
             --arg changed_files "${{ steps.test-override.outputs.all_changed_files || steps.changed-files.outputs.all_changed_files }}" \
             --arg diff_content "${{ steps.pr-diff.outputs.diff_content }}" \
             --arg android_issues "${{ steps.android-analysis.outputs.android_issues }}" \
             '{
               repository: $repo,
               pr_number: $pr_number,
               pr_title: $pr_title,
               pr_author: $pr_author,
               changed_files: $changed_files,
               diff_content: $diff_content,
               android_specific_issues: $android_issues,
               options: {
                 focus_areas: ["security", "performance", "best_practices", "android_guidelines"],
                 severity_threshold: "medium",
                 max_suggestions: 10
               }
             }')
         fi
         
         # Call the API with retry logic - WITH PROPER VARIABLE SUBSTITUTION
         MAX_RETRIES=3
         RETRY_COUNT=0
         
         while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
           echo "Calling AI review API (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)..."
         
           RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
             -H "Content-Type: application/json" \
             -H "Authorization: Bearer $CODE_REVIEW_API_KEY" \
             -d "$REQUEST_BODY" \
             "$CODE_REVIEW_WORKER_URL" || echo "CURL_ERROR")
         
           HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
           RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
         
           echo "Response code: $HTTP_CODE"
         
           if [ "$HTTP_CODE" = "200" ]; then
             echo "‚úÖ AI review completed successfully"
         
             # Handle DeepSeek response format
             if [[ "$CODE_REVIEW_WORKER_URL" == *"deepseek.com"* ]]; then
               REVIEW_CONTENT=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content // "No review generated"')
               # Convert to expected format
               FORMATTED_RESPONSE=$(jq -n \
                 --arg content "$REVIEW_CONTENT" \
                 '{
                   status: "success",
                   message: $content,
                   suggestions: ["See the detailed review above"],
                   overall_severity: "medium"
                 }')
               echo "response<<EOF" >> $GITHUB_OUTPUT
               echo "$FORMATTED_RESPONSE" >> $GITHUB_OUTPUT
               echo "EOF" >> $GITHUB_OUTPUT
             else
               echo "response<<EOF" >> $GITHUB_OUTPUT
               echo "$RESPONSE_BODY" >> $GITHUB_OUTPUT
               echo "EOF" >> $GITHUB_OUTPUT
             fi
             break
           else
             echo "‚ùå API call failed with HTTP code: $HTTP_CODE"
             ERROR_MSG=$(echo "$RESPONSE_BODY" | jq -r '.error.message // empty' 2>/dev/null || echo "$RESPONSE_BODY")
             echo "Error details: $ERROR_MSG"
         
             RETRY_COUNT=$((RETRY_COUNT + 1))
             if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
               echo "Retrying in 5 seconds..."
               sleep 5
             fi
           fi
         done
         
         if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
           echo "response<<EOF" >> $GITHUB_OUTPUT
           echo '{"status": "error", "message": "Failed to get AI review after multiple attempts"}' >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
         fi

     - name: Process AI Response
       id: process-response
       if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
       run: |
         RESPONSE='${{ steps.ai-review.outputs.response }}'
         
         # Parse the response
         STATUS=$(echo "$RESPONSE" | jq -r '.status // "error"')
         MESSAGE=$(echo "$RESPONSE" | jq -r '.message // "No message provided"')
         SUGGESTIONS=$(echo "$RESPONSE" | jq -r '.suggestions // []')
         SEVERITY=$(echo "$RESPONSE" | jq -r '.overall_severity // "info"')
         
         echo "status=$STATUS" >> $GITHUB_OUTPUT
         echo "message=$MESSAGE" >> $GITHUB_OUTPUT
         echo "suggestions<<EOF" >> $GITHUB_OUTPUT
         echo "$SUGGESTIONS" >> $GITHUB_OUTPUT
         echo "EOF" >> $GITHUB_OUTPUT
         echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
         
         # Add to workflow summary
         echo "## ü§ñ AI Code Review Results" >> $GITHUB_STEP_SUMMARY
         echo "" >> $GITHUB_STEP_SUMMARY
         echo "**Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
         echo "**Severity:** $SEVERITY" >> $GITHUB_STEP_SUMMARY
         echo "**Files reviewed:** ${{ steps.test-override.outputs.all_changed_files || steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_STEP_SUMMARY
         echo "" >> $GITHUB_STEP_SUMMARY
         echo "### Review:" >> $GITHUB_STEP_SUMMARY
         echo '```' >> $GITHUB_STEP_SUMMARY
         echo "$MESSAGE" >> $GITHUB_STEP_SUMMARY
         echo '```' >> $GITHUB_STEP_SUMMARY

     - name: Comment on PR
       if: github.event_name == 'pull_request' && steps.changed-files.outputs.any_changed == 'true' && steps.process-response.outputs.status != 'error'
       uses: actions/github-script@v7
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const status = '${{ steps.process-response.outputs.status }}';
           const message = `${{ steps.process-response.outputs.message }}`;
           const suggestions = `${{ steps.process-response.outputs.suggestions }}`;
           const severity = '${{ steps.process-response.outputs.severity }}';
           const androidIssues = `${{ steps.android-analysis.outputs.android_issues }}`;
           
           // Format the comment
           let comment = `## ü§ñ AI Code Review Results\n\n`;
           
           // Add status emoji
           const statusEmoji = {
             'success': '‚úÖ',
             'warning': '‚ö†Ô∏è',
             'error': '‚ùå',
             'info': '‚ÑπÔ∏è'
           };
           
           comment += `**Status:** ${statusEmoji[status] || 'üìã'} ${status.toUpperCase()}\n`;
           comment += `**Overall Severity:** ${severity}\n\n`;
           
           // Add Android-specific issues if any
           if (androidIssues.trim()) {
             comment += `### ü§ñ Android-Specific Issues\n\`\`\`\n${androidIssues}\`\`\`\n\n`;
           }
           
           // Add main message
           comment += `### üìù Summary\n${message}\n\n`;
           
           // Add suggestions if any
           if (suggestions && suggestions !== '[]') {
             comment += `### üí° Suggestions\n`;
             try {
               const suggestionList = JSON.parse(suggestions);
               suggestionList.forEach((suggestion, index) => {
                 comment += `${index + 1}. ${suggestion}\n`;
               });
             } catch (e) {
               comment += suggestions;
             }
           }
           
           comment += `\n---\n`;
           comment += `*This review was generated by AI and should be considered as suggestions. Please use your judgment when applying these recommendations.*`;
           
           // Post the comment
           await github.rest.issues.createComment({
             owner: context.repo.owner,
             repo: context.repo.repo,
             issue_number: context.issue.number,
             body: comment
           });

     - name: Send Slack Notification
       if: always()
       env:
         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
       run: |
         # Prepare Slack message based on results
         if [ "${{ steps.changed-files.outputs.any_changed }}" != "true" ] && [ "${{ github.event_name }}" != "workflow_dispatch" ]; then
           echo "No relevant files changed, skipping Slack notification"
           exit 0
         fi
         
         if [ -z "$SLACK_WEBHOOK" ]; then
           echo "Slack webhook not configured, skipping"
           exit 0
         fi
         
         STATUS="${{ steps.process-response.outputs.status }}"
         SEVERITY="${{ steps.process-response.outputs.severity }}"
         PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
         PR_URL="${{ steps.pr-info.outputs.pr_url }}"
         PR_AUTHOR="${{ steps.pr-info.outputs.pr_author }}"
         
         # Set color based on status/severity
         case "$SEVERITY" in
           "critical"|"high")
             COLOR="danger"
             ;;
           "medium"|"warning")
             COLOR="warning"
             ;;
           "low"|"info")
             COLOR="good"
             ;;
           *)
             COLOR="#808080"
             ;;
         esac
         
         # Create Slack payload
         PAYLOAD=$(jq -n \
           --arg pr_title "$PR_TITLE" \
           --arg pr_url "$PR_URL" \
           --arg pr_author "$PR_AUTHOR" \
           --arg pr_number "${{ github.event.number || 'TEST' }}" \
           --arg status "$STATUS" \
           --arg severity "$SEVERITY" \
           --arg color "$COLOR" \
           --arg message "${{ steps.process-response.outputs.message }}" \
           '{
             attachments: [{
               color: $color,
               title: "AI Code Review: PR #\($pr_number)",
               title_link: $pr_url,
               text: $pr_title,
               fields: [
                 {
                   title: "Author",
                   value: $pr_author,
                   short: true
                 },
                 {
                   title: "Status",
                   value: $status,
                   short: true
                 },
                 {
                   title: "Severity",
                   value: $severity,
                   short: true
                 },
                 {
                   title: "Summary",
                   value: $message,
                   short: false
                 }
               ],
               footer: "GitHub Actions AI Review",
               footer_icon: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
               ts: (now | floor)
             }]
           }')
         
         # Send to Slack
         curl -X POST -H 'Content-type: application/json' \
           --data "$PAYLOAD" \
           "$SLACK_WEBHOOK"

     - name: Set PR Status Check
       if: steps.changed-files.outputs.any_changed == 'true' && github.event_name == 'pull_request'
       uses: actions/github-script@v7
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const severity = '${{ steps.process-response.outputs.severity }}';
           const status = '${{ steps.process-response.outputs.status }}';
           
           // Determine check status based on severity
           let checkStatus = 'success';
           if (severity === 'critical' || status === 'error') {
             checkStatus = 'failure';
           } else if (severity === 'high' || severity === 'medium') {
             checkStatus = 'neutral';
           }
           
           // Create status check
           await github.rest.repos.createCommitStatus({
             owner: context.repo.owner,
             repo: context.repo.repo,
             sha: context.sha,
             state: checkStatus,
             target_url: '${{ steps.pr-info.outputs.pr_url }}',
             description: `AI Review: ${severity} severity`,
             context: 'ai-code-review'
           });