name: Code Review on Push

on:
  push:
    branches:
      - '**'  # All branches, or specify specific ones
    # Optional: Ignore certain paths
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'

jobs:
  code_review:
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Get previous commit for comparison

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files between current and previous commit
          changed_files=$(git diff --name-only HEAD^ HEAD | tr '\n' ',')
          echo "Changed files: $changed_files"
          echo "files=$changed_files" >> $GITHUB_OUTPUT

      - name: Call DeepSeek AI Worker
        id: call-deepseek
        env:
          CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
          CODE_REVIEW_WORKER_URL: ${{ secrets.CODE_REVIEW_WORKER_URL }}
        run: |
          echo "ü§ñ Requesting code review..."
          
          # Prepare payload with push event data
          json_payload=$(jq -n \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit "${{ github.sha }}" \
            --arg message "${{ github.event.head_commit.message }}" \
            --arg author "${{ github.event.head_commit.author.name }}" \
            --arg files "${{ steps.changed-files.outputs.files }}" \
            '{
              repository: $repo,
              branch: $branch,
              commit_sha: $commit,
              commit_message: $message,
              author: $author,
              changed_files: $files,
              event_type: "push"
            }')
          
          # Call API
          response=$(curl -s -f -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CODE_REVIEW_API_KEY" \
            -d "$json_payload" \
            "$CODE_REVIEW_WORKER_URL" || echo '{"status":"error","message":"API call failed"}')
          
          echo "response=$response" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          # Parse response
          response='${{ steps.call-deepseek.outputs.response }}'
          status=$(echo "$response" | jq -r '.status // "error"')
          message=$(echo "$response" | jq -r '.message // "No response from API"')
          
          # Set color based on status
          if [ "$status" = "success" ]; then
            color="good"
            emoji="‚úÖ"
          else
            color="danger"
            emoji="‚ùå"
          fi
          
          # Create Slack message
          slack_message=$(jq -n \
            --arg color "$color" \
            --arg emoji "$emoji" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit "${{ github.sha }}" \
            --arg commit_msg "${{ github.event.head_commit.message }}" \
            --arg author "${{ github.event.head_commit.author.name }}" \
            --arg commit_url "${{ github.event.head_commit.url }}" \
            --arg message "$message" \
            '{
              attachments: [{
                color: $color,
                pretext: "\($emoji) Code Review Result",
                title: "Commit: \($commit_msg | .[0:50])",
                title_link: $commit_url,
                fields: [
                  { title: "Branch", value: $branch, short: true },
                  { title: "Author", value: $author, short: true },
                  { title: "Commit", value: $commit[0:7], short: true },
                  { title: "Status", value: $status, short: true }
                ],
                text: $message,
                footer: "DeepSeek Code Review",
                ts: now | floor
              }]
            }')
          
          # Send to Slack
          curl -X POST -H 'Content-type: application/json' \
            --data "$slack_message" "$SLACK_WEBHOOK"