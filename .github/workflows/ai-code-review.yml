name: PR Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          separator: ','

      - name: Call DeepSeek AI Worker
        id: call-deepseek
        env:
          CODE_REVIEW_API_KEY: ${{ secrets.CODE_REVIEW_API_KEY }}
          CODE_REVIEW_WORKER_URL: ${{ secrets.CODE_REVIEW_WORKER_URL }}
        run: |
          # Call the DeepSeek AI worker with the changed files
          # and store the response in a variable
          echo "Calling DeepSeek AI worker..."
          response=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $CODE_REVIEW_API_KEY" -d '{"repository": "${{ github.repository }}", "pr_number": "${{ github.event.number }}", "changed_files": "${{ steps.changed-files.outputs.all_changed_files }}", "options": {}}' $CODE_REVIEW_WORKER_URL)
          echo "::set-output name=response::$response"

      - name: Process DeepSeek AI Response
        id: process-response
        run: |
          # Process the response from the DeepSeek AI worker
          # and set outputs for the Slack notification
          echo "Processing DeepSeek AI response..."
          response="${{ steps.call-deepseek.outputs.response }}"
          status=$(echo $response | jq -r '.status')
          if [ "$status" = "success" ]; then
            echo "::set-output name=status::success"
            echo "::set-output name=message::$(echo $response | jq -r '.message')"
          else
            echo "::set-output name=status::failure"
            echo "::set-output name=message::$(echo $response | jq -r '.message')"
          fi

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          # Send a Slack notification with the review results
          echo "Sending Slack notification..."
          status="${{ steps.process-response.outputs.status }}"
          message="${{ steps.process-response.outputs.message }}"
          payload="{\"text\": \"PR #${{ github.event.number }} - ${{ github.event.pull_request.title }} - Status: $status - Message: $message\"}"
          curl -X POST -H 'Content-type: application/json' --data "$payload" $SLACK_WEBHOOK